{"version":3,"sources":["stores/Userstore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","diary","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","Userstore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","then","doLogout","striped","bordered","hover","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8aed995a.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n\r\nclass Userstore {\r\n\tconstructor() {\r\n\t\textendObservable(this, {\r\n\r\n\t\t\tloading: true,\r\n\t\t\tisLoggedIn: false,\r\n\t\t\tusername: '',\r\n\t\t\tdiary: ''\r\n\r\n\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\nexport default new Userstore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render() {\r\n        return (\r\n    \t<div className=\"inputField\">\r\n     \t\t<input \r\n      \t\t\tclassName='input'\r\n      \t\t\ttype={this.props.type}\r\n      \t\t\tplaceholder={this.props.placeholder}\r\n      \t\t\tvalue={this.props.value}\r\n      \t\t\tonChange={(e)=> this.props.onChange(e.target.value)}\r\n      \t\t/>\r\n      \t</div>\r\n      \t);\r\n  }\r\n}\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render() {\r\n        return (\r\n      <div className=\"submitButton\">\r\n\r\n      \t<button className='btn'\r\n      \tdisabled={this.props.disabled}\r\n      \tonClick={()=> this.props.onClick()}\r\n      \t>\r\n      \t{this.props.text}\r\n\r\n      \t</button>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SubmitButton;","import React from 'react';\r\nimport Userstore from './stores/Userstore';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = \r\n\t\t{\r\n\t\t\tusername: '',\r\n\t\t\tpassword: '',\r\n\t\t\tbuttonDisabled: false,\r\n\t\t\tdiary:null\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\tsetInputValue(property, val)\r\n\t{\r\n\t\tval = val.trim();\r\n\t\tif(val.length > 12)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\t[property]: val\r\n\t\t})\r\n\t}\r\n\tresetForm()\r\n\t{\r\n\r\n\t\tthis.setState({\r\n\r\n\t\t\tusername:'',\r\n\t\t\tpassword:'',\r\n\t\t\tbuttonDisabled: false,\r\n\t\t\tdiary:''\r\n\t\t})\r\n\t}\r\n\r\n\tasync doLogin()\r\n\t{\r\n\r\n\t\tif(!this.state.username)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!this.state.password)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.setState({buttonDisabled:true})\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlet res = await fetch('/login', {\r\n\t\t\t   method: 'post',\r\n\t\t\t   headers:  {\r\n\t\t\t   'Accept': 'application/json',\r\n\t\t\t   'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\tusername:this.state.username,\r\n\t\t\tpassword:this.state.password\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\t\tlet result = await res.json();\r\n\r\n\t      \tif(result && result.success)\r\n\t   \t    {\r\n\t    \t\tUserstore.isLoggedIn = true;\r\n\t    \t    Userstore.username = result.username;\r\n\t   \r\n\t    \t}\r\n\t    \telse if(result && result.success === false)\r\n\t    \t{\r\n\t    \t\tthis.resetForm();\r\n\t    \t\talert(result.msg);\r\n\t    \t}\r\n\r\n\t\t}\r\n\r\n\t\tcatch(e){\r\n\r\n\t\t\tconsole.log(e);\r\n\t\t\tthis.resetForm();\r\n\t\t}\r\n\r\n\t\t//console.log(\"Start do Login data\");\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlet res = await fetch('http://aneurinj.com:3000/logindata') \r\n\t\t\tlet diary\t = await res.json();\r\n\t\t\tthis.state.diary=diary\r\n\t \t}\t\r\n\t\tcatch(e){\r\n\r\n\t\t\tconsole.log(e);\r\n\t\t\tthis.resetForm();\r\n\t\t}\r\n\t\t//console.log(\"End do Login data\");\r\n\t}\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loginForm\">\r\n      Log in\r\n      <InputField\r\n      \ttype='text'\r\n      \tplaceholder='username'\r\n      \tvalue={this.state.username ? this.state.username :''}\r\n      \tonChange={ (val) => this.setInputValue('username', val)} \r\n      />\r\n\r\n       <InputField\r\n      \ttype='password'\r\n      \tplaceholder='password'\r\n      \tvalue={this.state.password ? this.state.password :''}\r\n      \tonChange={ (val) => this.setInputValue('password', val)} \r\n      />\r\n\r\n\r\n      <SubmitButton \r\n           text='Login'\r\n           disabled={this.state.buttonDisabled}\r\n           onClick=\r\n           { \r\n           \t() => this.doLogin()\r\n           }\r\n       />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default LoginForm;\r\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport Userstore from './stores/Userstore';\nimport LoginForm from './LoginForm';\nimport SubmitButton from './SubmitButton';\nimport * as ReactBootStrap from \"react-bootstrap\";\n\nimport './App.css';\n    \nclass App extends React.Component {\n\n  async componentDidMount()\n  {\n    try\n    {\n      let res = await fetch('/isLoggedIn', \n      {\n        method: 'post',\n        headers: \n        {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if(result && result.success)\n      {\n        Userstore.loading = false;\n        Userstore.isLoggedIn = true;\n        Userstore.result = result.username;\n      }\n      else\n      {\n        Userstore.loading = false;\n        Userstore.isLoggedIn = false;\n      }\n\n    }\n    catch(e)\n    {\n      Userstore.loading = false;\n      Userstore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout()\n  {\n    try\n    {\n      let res = await fetch('/logout', \n      {\n        method: 'post',\n        headers: \n        {\n          'Accept':'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if(result && result.success)\n      {\n        Userstore.isLoggedIn = false;\n        Userstore.username = '';\n      }\n\n    }\n    catch(e)\n    {\n        console.log(e)\n    }\n  }\n\n\n  render() {\n    const strJSON = \"\";\n      if(Userstore.loading)\n      {\n        return (\n\n           <div className=\"app\">\n\n            <div className='container'>Loading, please wait...</div>\n\n           </div>\n        )\n      }\n      else\n      {\n        if(Userstore.isLoggedIn)\n        {\n          fetch('http://aneurinj.com:3000/logindata') \n            .then(res => res.json())\n              .then(json =>\n                {\n                  //console.log(json);\n                  let strJSON = json;\n\n                });\n      \n          return (\n\n           <div className=\"app\">\n            <div className='container'>Hello {Userstore.username}\n            Hello {Userstore.diary}\n          \n\n            <SubmitButton \n              text={'Logout'}\n              disabled={false}\n              onClick={ () => this.doLogout() }\n            />\n\n         \n\n\n          <ReactBootStrap.Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>Username</th>\n                <th>Note</th>\n                <th>Date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Userstore.diary}\n            </tbody>\n          </ReactBootStrap.Table>\n\n\n\n            </div>\n           </div>\n        )\n        }\n      return (\n      <div className=\"app\">\n        <div className='container'>\n\n          <LoginForm />\n\n        </div>\n      </div>\n\n      );\n   }\n }\n}\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}